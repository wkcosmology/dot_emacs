* Evil
** Evil setting
    #+BEGIN_SRC emacs-lisp
      ; this need to be before load evil
      (setq evil-want-C-u-scroll t)
      (use-package evil-leader
      :ensure t
      :init
      (global-evil-leader-mode 1))
      (use-package evil
      :ensure t
      :init
      (evil-mode 1))
      (with-eval-after-load 'evil-maps
        (define-key evil-normal-state-map (kbd "C-n") nil)
        (define-key evil-normal-state-map (kbd "C-p") nil))
      ;; add _ to word concept for text object
      (defadvice evil-inner-word (around underscore-as-word activate)
        (let ((table (copy-syntax-table (syntax-table))))
          (modify-syntax-entry ?_ "w" table)
          (with-syntax-table table
            ad-do-it)))
    #+END_SRC

    #+RESULTS:
    : evil-inner-word
** Evil keymapping config
#+BEGIN_SRC emacs-lisp
  (define-key evil-insert-state-map "\C-n" 'evil-next-line)
  (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
  (define-key evil-normal-state-map "Q" 'call-last-kbd-macro)
  (define-key evil-visual-state-map "Q" 'call-last-kbd-macro)
#+END_SRC

#+RESULTS:
: call-last-kbd-macro

** Evil-leader
    #+BEGIN_SRC emacs-lisp
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
	"ff" 'counsel-find-file
	"bb" 'ivy-switch-buffer
	"fo" 'counsel-outline
	"fp" 'counsel-projectile-find-file
	"fr" 'counsel-recentf
	"fs" 'save-buffer
	"jj" 'avy-goto-char
	"wv" 'split-window-right
	"wh" 'split-window-below
	":"  'counsel-M-x
	"fl"  'swiper
	"k"  'jedi:show-doc
	"gd"  'anaconda-mode-find-definitions
	"q"  'ace-delete-window
	"ft" 'neotree-find
	"'"  'multi-term
	"ef"  'flycheck-first-error
	"en"  'flycheck-next-error
	"ep"  'flycheck-previous-error
	"ec"  'flycheck-clear
	"wm" 'delete-other-windows)
    #+END_SRC

    #+RESULTS:
** Evil-surround
    #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
	:ensure t
	:init
	(global-evil-surround-mode 1))
    #+END_SRC
** Evil-nerd-commenter
    #+BEGIN_SRC emacs-lisp
    (use-package evil-nerd-commenter
	:ensure t
	:init
	(evilnc-default-hotkeys))
    (define-key evil-normal-state-map (kbd "gc") 'evilnc-comment-or-uncomment-lines)
    (define-key evil-visual-state-map (kbd "gc") 'evilnc-comment-or-uncomment-lines)
    #+END_SRC
** Evil-matchit
  #+BEGIN_SRC emacs-lisp
    (use-package evil-matchit
      :ensure t
      :init
      (global-evil-matchit-mode 1))
  #+END_SRC
** Evil-snipe
   #+BEGIN_SRC emacs-lisp
     (use-package evil-snipe
       :ensure t
       :config
       (evil-snipe-override-mode 1))
   #+END_SRC

   #+RESULTS:
   : t

* interface tweaks
    #+BEGIN_SRC emacs-lisp
      ;; basic config
      (setq inhibit-startup-message t)
      (tool-bar-mode -1)
      (fset 'yes-or-no-p 'y-or-n-p)
      (global-set-key (kbd "<f5>") 'revert-buffer)
      (blink-cursor-mode 0)
      ;; set hybrid line number
      (linum-relative-global-mode)
      (setq linum-relative-current-symbol "")
      ;; match parent
      (electric-pair-mode t)
      ;; record last place
      (setq-default save-place t)
      (require 'saveplace)
      (save-place-mode 1)
      ;; font setting
      (set-default-font "Monaco-14:weight=light")
      ;; window size
      (when window-system
      (set-frame-position (selected-frame) 120 0)
      (set-frame-size (selected-frame) 150 65))
      ;; smooth scrolling
      (use-package smooth-scrolling
        :ensure t
        :config
        (setq smooth-scrolling-mode 1)
        (setq smooth-scroll-margin 3))
      ; indent setting
      (setq-default tab-width 4)
      (setq-default indent-tabs-mode nil)
      ;; iedit mode
      (add-to-list 'load-path "~/.emacs.d/external/iedit/")
      (require 'iedit)
    #+END_SRC


    #+RESULTS:
    : iedit

* try
    #+BEGIN_SRC emacs-lisp
    (use-package try
	    :ensure t)
    #+END_SRC
* which key
    Brings up some help
    #+BEGIN_SRC emacs-lisp
    (use-package which-key
	    :ensure t 
	    :config
	    (which-key-mode))
    #+END_SRC

* Ace-window
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
	  :ensure t
	  :init
	  (progn
	  (global-set-key [remap other-window] 'ace-window)
	  (custom-set-faces
	  '(aw-leading-char-face
	      ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	  ))
    #+END_SRC

    #+RESULTS:
* Org-mode
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
* ivy & swipper & avy
    #+BEGIN_SRC emacs-lisp
      ;; it looks like counsel is a requirement for swiper
      (use-package counsel
	:ensure t)

      (use-package ivy
	:ensure t
	:diminish (ivy-mode)
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy))


      (use-package swiper
	:ensure try
	:bind (("C-s" . swiper)
	       ("C-c C-r" . ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file))
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))

      (use-package avy
	:ensure t)

    #+END_SRC

    #+RESULTS:

* Theme & UI
    #+BEGIN_SRC emacs-lisp
      ;; install theme
      (use-package monokai-theme
        :ensure t)
      (use-package color-theme-sanityinc-tomorrow
        :ensure t)
      (use-package solarized-theme
        :ensure t)
      ;; setting theme
      (load-theme 'monokai t)
      ;; rainbow-delimiters
      (use-package rainbow-delimiters
        :ensure t
        :config
        (rainbow-delimiters-mode 1))
      ;; power line
      (require 'powerline)
      (powerline-default-theme)
      ;; all the icons
      (use-package all-the-icons
        :ensure t)
    #+END_SRC

    #+RESULTS:

* reveal.js
    #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal
	:ensure ox-reveal)

      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t)

      (use-package htmlize
	:ensure t)
    #+END_SRC

    #+RESULTS:
* Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
      :ensure t
      :init (global-flycheck-mode 1)
      )
      (setq flycheck-check-syntax-automatically '(mode-enabled save))
    #+END_SRC

    #+RESULTS:
    | mode-enabled | save |
* Auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :config
      (ac-config-default)
      ;; disable auto complete, trigger by key
      ;; (setq ac-auto-start nil)
      ;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
      ;; remap key
      (setq ac-use-menu-map t)
      (define-key ac-menu-map "\C-n" 'ac-next)
      (define-key ac-menu-map "\C-p" 'ac-previous)
      ;; add more source
      (setq ac-sources '(
                         ac-source-filename
                         ac-source-symbols
                         ac-source-words-in-same-mode-buffers))
      ;; popup window UI setting
      (set-face-foreground 'ac-candidate-face "white")
      (set-face-background 'ac-candidate-face "gray26")
      (set-face-underline 'ac-candidate-face nil)
      (set-face-underline 'ac-completion-face nil)
      (set-face-background 'ac-selection-face "deepskyblue")
      (setq ac-max-width 0.4)
      (fringe-mode '(0 . nil))
      (setq popup-use-optimized-column-computation nil)
      ;; quick help(doc when complete) setting
      (setq ac-use-quick-help nil)
      ;; (setq ac-quick-help-delay 1.0)
      ;; fuzzy complete
      (setq ac-fuzzy-enable t)
      ;; complete after backspace
      (setq ac-trigger-commands
            (cons 'backward-delete-char-untabify ac-trigger-commands))
    )

    ;; use pop-tip package for auto-compelte
    ;; (use-package pop-tip
    ;;   :ensure t
    ;;   :config
    ;;   (setq ac-quick-help-prefer-pos-tip t)
    ;; )

    (use-package jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)
    )

    ;; set the popup window style to eldoc
    (custom-set-variables
     '(jedi:get-in-function-call-delay 10)
     ;; '(jedi:tooltip-method '(pos-tip eldoc))
     '(jedi:tooltip-method nil)
    )
    ;; set jedi package to speed up
    (setq jedi:server-args
          '("--sys-path" "/Users/wangk/anaconda3/bin/python3"
            "--sys-path" "/Users/wangk/anaconda3/lib/python3.7/site-packages/")
    )
  #+END_SRC

  #+RESULTS:
  | --sys-path | /Users/wangk/anaconda3/bin/python3 | --sys-path | /Users/wangk/anaconda3/lib/python3.7/site-packages/ |

* Python
    #+BEGIN_SRC emacs-lisp
      (setq py-python-command "python3")
      (setq python-shell-interpreter "python3")
      ;; (setq python-shell-interpreter "/Users/wangk/anaconda3/bin/ipython"
      ;;       python-shell-interpreter-args "-i --simple-prompt")

      ;; (use-package elpy
      ;;   :ensure t
      ;;   :custom (elpy-rpc-backend "jedi")
      ;;   :config
      ;;   (elpy-enable)
      ;; )

      (use-package anaconda-mode
        :ensure t
        :after python
        :hook
        (python-mode . anaconda-mode)
        (python-mode . anaconda-eldoc-mode))

      (use-package virtualenvwrapper
        :ensure t
        :config
        (venv-initialize-interactive-shells)
        (venv-initialize-eshell))

      ;; (require 'pymacs)
      ;; (pymacs-load "ropemacs" "rope-")

    #+END_SRC

    #+RESULTS:
    : t
* Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	  :ensure t
	  :init
	  (yas-global-mode 1))
      (yas/load-directory "~/.emacs.d/snippets")
      ; enable AndreaCrotti/yasnippet-snippets
      (use-package yasnippet-snippets
	:ensure t)
      ; enable marubu/yasnippet-numpy-style
      (setq yas-triggers-in-field t)
    #+END_SRC

    #+RESULTS:
    : t
* Backup related
    #+BEGIN_SRC emacs-lisp
      ; copied from others
      (setq
       backup-by-copying t    ;自动备份
       delete-old-versions t ; 自动删除旧的备份文件
       kept-new-versions 10   ; 保留最近的10个备份文件
       kept-old-versions 2   ; 保留最早的2个备份文件
       version-control t    ; 多次备份
       ;; 把生成的备份文件放到统一的一个目录,而不在在文件当前目录生成好多 ~ #的文件
       ;; 如果你编辑某个文件时 后悔了想恢复成以前的一个版本 你可以到这个目录下
       ;; 找到备份的版本
       backup-directory-alist `((".*" . "~/.emacs.d/cache/backup_files/")) ;
       auto-save-file-name-transforms `((".*" "~/.emacs.d/cache/backup_files/" t))
       auto-save-list-file-prefix   "~/.emacs.d/cache/backup_files/saves-")

    #+END_SRC

    #+RESULTS:
    : ~/.emacs.d/cache/backup_files/saves-
* Miscellaneous
    #+BEGIN_SRC emacs-lisp
      ;; make sure exec program same as shell
      (use-package exec-path-from-shell
        :ensure t
        :init
        (when (memq window-system '(mac ns x))
          (exec-path-from-shell-initialize)))

    #+END_SRC

    #+RESULTS:
    
* PDF tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))
    (use-package org-pdfview
      :ensure t)
    (add-hook 'pdf-view-mode-hook (lambda()
				    (linum-relative-mode -1)))
  #+END_SRC

  #+RESULTS:
  | (lambda nil (linum-relative-mode -1)) | pdf-tools-enable-minor-modes |

* Terminal
  #+BEGIN_SRC emacs-lisp
    (use-package multi-term
      :ensure t
      :config
      (setq multi-term-program "/bin/zsh")
    )

    (add-hook 'term-mode-hook
          (lambda ()
        (setq term-buffer-maximum-size 10000)))

    (add-hook 'term-mode-hook
          (lambda ()
        (setq show-trailing-whitespace nil)))

    (add-hook 'term-mode-hook (lambda()
        (setq yas-dont-activate t)))

    ;; paste into multi-term
    (evil-set-initial-state 'term-mode 'emacs)
    (add-to-list 'term-bind-key-alist '("s-v" . term-paste))
#+END_SRC

  #+RESULTS:
  : ((s-v . term-paste) (C-c C-c . term-interrupt-subjob) (C-c C-e . term-send-esc) (C-p . previous-line) (C-n . next-line) (C-s . isearch-forward) (C-r . isearch-backward) (C-m . term-send-return) (C-y . term-paste) (M-f . term-send-forward-word) (M-b . term-send-backward-word) (M-o . term-send-backspace) (M-p . term-send-up) (M-n . term-send-down) (M-M . term-send-forward-kill-word) (M-N . term-send-backward-kill-word) (<C-backspace> . term-send-backward-kill-word) (M-r . term-send-reverse-search-history) (M-d . term-send-delete-word) (M-, . term-send-raw) (M-. . comint-dynamic-complete))
* Neotree
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :config
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    )
    ; neotree key setting, avoid conflition with evil-mode
    (add-hook 'neotree-mode-hook
	      (lambda ()
		(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
		(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
		(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
		(define-key evil-normal-state-local-map (kbd "l") 'neotree-enter)
		(define-key evil-normal-state-local-map (kbd "h") 'neotree-select-up-node)
		(define-key evil-normal-state-local-map (kbd "j") 'neotree-next-line)
		(define-key evil-normal-state-local-map (kbd "k") 'neotree-previous-line)
		(define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
		(define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
		(define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
		(define-key evil-normal-state-local-map (kbd "N") 'neotree-create-node)
		(define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
		(define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (define-key evil-insert-state-local-map (kbd TAB) (quote neotree-enter)) | (define-key evil-insert-state-local-map (kbd q) (quote neotree-hide)) | (define-key evil-insert-state-local-map (kbd RET) (quote neotree-enter)) | (define-key evil-insert-state-local-map (kbd l) (quote neotree-enter)) | (define-key evil-insert-state-local-map (kbd h) (quote neotree-select-up-node)) | (define-key evil-insert-state-local-map (kbd j) (quote neotree-next-line)) | (define-key evil-insert-state-local-map (kbd k) (quote neotree-previous-line)) | (define-key evil-insert-state-local-map (kbd g) (quote neotree-refresh)) | (define-key evil-insert-state-local-map (kbd r) (quote neotree-rename-node)) | (define-key evil-insert-state-local-map (kbd d) (quote neotree-delete-node)) | (define-key evil-insert-state-local-map (kbd N) (quote neotree-create-node)) | (define-key evil-insert-state-local-map (kbd A) (quote neotree-stretch-toggle)) | (define-key evil-insert-state-local-map (kbd H) (quote neotree-hidden-file-toggle)) |
  | lambda | nil | (define-key evil-normal-state-local-map (kbd TAB) (quote neotree-enter)) | (define-key evil-normal-state-local-map (kbd q) (quote neotree-hide)) | (define-key evil-normal-state-local-map (kbd RET) (quote neotree-enter)) | (define-key evil-normal-state-local-map (kbd l) (quote neotree-enter)) | (define-key evil-normal-state-local-map (kbd h) (quote neotree-select-up-node)) | (define-key evil-normal-state-local-map (kbd j) (quote neotree-next-line)) | (define-key evil-normal-state-local-map (kbd k) (quote neotree-previous-line)) | (define-key evil-normal-state-local-map (kbd g) (quote neotree-refresh)) | (define-key evil-normal-state-local-map (kbd r) (quote neotree-rename-node)) | (define-key evil-normal-state-local-map (kbd d) (quote neotree-delete-node)) | (define-key evil-normal-state-local-map (kbd N) (quote neotree-create-node)) | (define-key evil-normal-state-local-map (kbd A) (quote neotree-stretch-toggle)) | (define-key evil-normal-state-local-map (kbd H) (quote neotree-hidden-file-toggle)) |

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode +1))
    (use-package counsel-projectile
      :ensure t)
  #+END_SRC

  #+RESULTS:
* Orgmode
  #+BEGIN_SRC emacs-lisp
    (require 'ox-latex)
    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil))
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass{article}"
                   ("\\section{%s}" . "\\section*{%s}")))

    (let ((my-path "/Library/TeX/texbin/"))
         (setenv "PATH" (concat my-path ":" (getenv "PATH"))) 
         (add-to-list 'exec-path my-path))

    ;; figure setting
    (plist-put org-format-latex-options :scale 1.5)
    (setq org-preview-latex-default-process 'dvisvgm)
    ;; run python code in org mode
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
    (with-eval-after-load 'python
      (defun python-shell-completion-native-try ()
        "Return non-nil if can trigger native completion."
        (let ((python-shell-completion-native-enable t)
              (python-shell-completion-native-output-timeout
               python-shell-completion-native-try-output-timeout))
          (python-shell-completion-native-get-completions
           (get-buffer-process (current-buffer))
           nil "_"))))


  #+END_SRC

  #+RESULTS:
  : python-shell-completion-native-try
